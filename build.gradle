/*
 * Copyright (C) 2018. OpenLattice, Inc.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 * You can contact the owner of the copyright at support@openlattice.com
 *
 *
 */

plugins {
    id 'eclipse'
    id 'idea'
    id 'jacoco'
    id 'checkstyle'
    id 'com.github.spotbugs' version '1.6.2'
    id 'org.jetbrains.kotlin.jvm' version '1.2.51'
    id 'org.jetbrains.kotlin.plugin.spring' version '1.2.51'
    id 'org.jetbrains.dokka' version '0.9.17'
    id 'java'
}

description = "Conductor Client"
group = "com.openlattice"

ext.projectName = "conductor-client"
ext.scmUrl = 'scm:git:https://github.com/openlattice/conductor-client.git'
ext.connectionUrl = 'scm:git:https://github.com/openlattice/conductor-client.git'
ext.developerConnectionUrl = 'scm:git:https://github.com/openlattice/conductor-client.git'

apply from: "https://raw.githubusercontent.com/openlattice/gradles/master/openlattice.gradle"

sourceCompatibility=JavaVersion.VERSION_1_10
targetCompatibility=JavaVersion.VERSION_1_10

def versions = [
  checkstyle: '7.4',
]

checkstyle {
  toolVersion = "${versions.checkstyle}"
}

tasks.withType(Checkstyle) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugs {
    toolVersion = '3.1.5'
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(Javadoc) {
    enabled = false
}

dokka {
    outputFormat = 'html'
    outputDirectory = "$buildDir/javadoc"
}


dependencies {
    spotbugsPlugins 'com.h3xstream.findsecbugs:findsecbugs-plugin:1.7.1'
    compileOnly 'net.jcip:jcip-annotations:1.0'
    compileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.3'
    testCompileOnly 'net.jcip:jcip-annotations:1.0'
    testCompileOnly 'com.github.spotbugs:spotbugs-annotations:3.1.3'
    /*
     * SL4J
     */
    compile group: "org.slf4j", name: "slf4j-api", version:"${slf4j_version}"
  
    /*
     * @Inject and @Nullable support
     */
    compile "javax.inject:javax.inject:${javax_inject_version}"

    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-csv:${jackson_version}"
    compile 'com.esotericsoftware:kryo-shaded:4.0.0'
    compile 'com.esotericsoftware:minlog:1.3.0'
    compile 'com.esotericsoftware:reflectasm:1.11.3'
    compile 'org.objenesis:objenesis:2.4'

    
    compile "com.google.guava:guava:${guava_version}"
    compile "org.apache.olingo:odata-commons-api:${odata_version}"
    compile "org.apache.olingo:odata-commons-core:${odata_version}"
    compile "org.apache.olingo:odata-server-api:${odata_version}"
    compile "org.apache.olingo:odata-server-core:${odata_version}"

    compile "org.xerial.snappy:snappy-java:${snappy_version}"
    compile "net.jpountz.lz4:lz4:${lz4_version}"
    compile 'de.javakaffee:kryo-serializers:0.42'
    compile 'com.google.code.findbugs:findbugs:3.0.1'

    if( project.hasProperty('developmentMode') && project.developmentMode ) {
        logger.quiet(project.name + " using project dependencies.")
        compile project(":api")
        compile project(":rhizome")
        testCompile( project(path: ":api", configuration: "tests"))
        testCompile( project(path: ":rhizome", configuration: "tests"))
        testCompile( project(path: ":rhizome-client", configuration: "tests"))
    } else {
        logger.quiet(project.name + " using jar dependencies.")
        compile "com.openlattice:api:0.0.10-SNAPSHOT"
        compile "com.openlattice:rhizome:${rhizome_version}"

        testCompile "com.openlattice:api:0.0.10-SNAPSHOT:tests"
        testCompile "com.openlattice:rhizome:${rhizome_version}:tests"
        testCompile "com.openlattice:rhizome-client:${rhizome_client_version}:tests"
    }

    /*
     * TESTING
     */
    testCompile "junit:junit:${junit_version}"
    testCompile( "org.mockito:mockito-all:${mockito_version}" ) {
        exclude module : 'hamcrest'
        exclude module : 'hamcrest-core'
    }
    compile "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
}

install {
	configuration = configurations.published
}

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true
    ext.sourceCompatibility=JavaVersion.VERSION_1_10
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

def branch ="$System.env.bamboo_planRepository_branchName"

def jarname = ""
def scmUrl = ""
def connectionUrl = ""
def developerConnectionUrl = ""

if( project.hasProperty('projectName') && project.hasProperty('scmUrl')  ) {
    scmUrl = ext.scmUrl
    connectionUrl = ext.connectionUrl
    developerConnectionUrl = ext.developerConnectionUrl
    jarname = ext.projectName
} else {
    jarname = project.name
    scmUrl = "scm:git:https://github.com/openlattice/${project.name}.git"
    connectionUrl = "scm:git:https://github.com/openlattice/${project.name}.git"
    developerConnectionUrl = "scm:git:https://github.com/openlattice/${project.name}.git"
}

println "Basename for jars will be: " + jarname

if( branch == null || branch == "" ) {
   branch = 'develop'
}

if ( true ) {
    apply plugin: "maven-publish"
    apply plugin: "signing"

    archivesBaseName = jarname

    ext."signing.keyId" = 'B7944F9C'
    ext."signing.secretKeyRingFile" = "$System.env.bamboo_JAR_SIGNING_KEYRING"
    ext."signing.password" = "$System.env.bamboo_JAR_SIGNING_PASSWORD"

    configurations {
        pom
    }

    signing {
        sign configurations.archives
        sign configurations.pom
    }

    if ( branch == "develop" || branch.startsWith("release/") ) {
        publishing {
            repositories {
                maven {
                    url sonatypeSnapshotUrl
                    credentials {
                        username = "$System.env.bamboo_SONATYPE_USERNAME"
                        password = "$System.env.bamboo_SONATYPE_PASSWORD"
                    }
                }
                maven {
                    url snapshotUrl
                    credentials {
                        username = "$System.env.bamboo_ARTIFACTORY_USERNAME"
                        password = "$System.env.bamboo_ARTIFACTORY_PASSWORD"
                    }
                }
            }
            publications {
                mavenJava(MavenPublication) {
                    pom.withXml {
                        asNode().children().last() + {
                            resolveStrategy = Closure.DELEGATE_FIRST
                            name jarname

                            scm {
                                url scmUrl
                                connection connectionUrl
                                developerConnection developerConnectionUrl
                            }

                            licenses {
                                license {
                                    name 'The Apache License, Version 2.0'
                                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                    distribution 'repo'
                                }
                            }

                            developers {
                                developer {
                                    id 'openlattice'
                                    name 'OpenLattice Team'
                                    email 'support@openlattice.com'
                                }
                            }
                        }
                    }
                    from components.java
                    //artifact ('README.md') {
                    //   classifier = 'README'
                    //  extension  = 'md'
                    //}

                    artifact javadocJar
                    artifact sourcesJar
                    artifact testJar


                }
            }
        }
    }
    else if ( branch.equals("master") ) {
        publishing {
            repositories {
                maven {
                    url sonatypeMasterUrl
                    credentials {
                        username = "$System.env.bamboo_SONATYPE_USERNAME"
                        password = "$System.env.bamboo_SONATYPE_PASSWORD"
                    }
                }
                maven {
                    url releaseUrl
                    credentials {
                        username = "$System.env.bamboo_ARTIFACTORY_USERNAME"
                        password = "$System.env.bamboo_ARTIFACTORY_PASSWORD"
                    }
                }
            }
            publications {
                mavenJava(MavenPublication) {
                    pom.withXml {
                        asNode().children().last() + {
                            resolveStrategy = Closure.DELEGATE_FIRST
                            name jarname

                            scm {
                                url scmUrl
                                connection connectionUrl
                                developerConnection developerConnectionUrl
                            }

                            licenses {
                                license {
                                    name 'The Apache License, Version 2.0'
                                    url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                                    distribution 'repo'
                                }
                            }

                            developers {
                                developer {
                                    id 'openlattice'
                                    name 'OpenLattice Team'
                                    email 'support@openlattice.com'
                                }
                            }
                        }
                    }
                    from components.java
                    //artifact ('README.md') {
                    //classifier = 'README'
                    //extension  = 'md'
                    //}

                    artifact javadocJar
                    artifact sourcesJar
                    artifact testJar

                }
            }
        }
    }
}
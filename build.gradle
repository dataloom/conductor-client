apply from: "http://api.krypt.int/gradle/kryptnostic.gradle"

description = "Kryptnostic Conductor Client"
group = "com.kryptnostic"

apply plugin: "maven-publish"
apply plugin: "java"
apply plugin: "maven"
apply plugin: "eclipse"
apply plugin: "idea"
apply plugin: "jacoco"

sourceCompatibility=JavaVersion.VERSION_1_8

repositories {
  mavenCentral()  
  mavenLocal()
  maven {
    url "https://build.shibboleth.net/nexus/content/groups/public/"
  }
  maven {
    url "http://maven.springframework.org/snapshot"
  }
  maven {
    url  "http://maven.springframework.org/milestone"
  }
  maven {
   url "http://repo.maven.apache.org/maven2"
  }
  maven {
   url "https://oss.sonatype.org/content/repositories/snapshots"
  }
    maven {
    url "https://raw.github.com/dkhenry/rethinkjava/mvn-repo"
  }

}

dependencies { 
    /*
     * SL4J + LOG4J2
     */
    compile group: "org.slf4j", name: "slf4j-api", version:"${slf4j_version}"

    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: "${log4j_version}" 
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4j_version}" 
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4j_version}" 

	if( project.hasProperty('developmentMode') && project.developmentMode ) {
        logger.info("$project.name is using project dependencies.")
        //testCompile( project(":kryptnostic-metrics") )
    } else {
        logger.quiet("$project.name is using jar dependencies.")
        
    }
    
    compile "com.squareup.retrofit:retrofit:${retrofit_version}"
    compile "com.squareup.okhttp:okhttp-urlconnection:2.3.0"
    compile "com.squareup.okhttp:okhttp:2.3.0"
	// FIXME: not working! use the following to replace com.kryptnostic.kodex.v1.utils.JacksonConverter plz!
	// compile "com.squareup.retrofit:retrofit-converters:1.6.0" // not available for 1.6.1 //#${retrofit_version}
  
    /*
     * @Inject and @Nullable support
     */
    compile 'javax.inject:javax.inject:1'
    compile 'com.google.code.findbugs:jsr305:1.3.9'


    /*
     * APACHE COMMONS
     * Logging, StringUtils, RandomStringUtils, IOUtils, and more
     */

     compile 'commons-io:commons-io:2.4'
     compile 'org.apache.commons:commons-lang3:3.1'
     compile 'commons-logging:commons-logging:1.1.3'


    /*
     JODA TIME - A better datetime class.
    */
    compile 'joda-time:joda-time:2.4'

    /*
     * JACKSON SERIALIZATION
     * YAML via SnakeYaml
     * Afterburner for faster serialization
     * Guava integration
     * Smile for binary serialization
     * Jersey integration
     * Jaxb annotation support
     */
    compile "com.fasterxml.jackson.core:jackson-core:${jackson_version}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jackson_version}"
    compile "com.fasterxml.jackson.datatype:jackson-datatype-guava:${jackson_version}"
    compile "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:${jackson_version}"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:${jackson_version}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-smile:${jackson_version}"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jackson_version}"
    compile "com.fasterxml.jackson.jaxrs:jackson-jaxrs-json-provider:${jackson_version}"
    compile 'org.yaml:snakeyaml:1.13'
    compile 'com.jayway.jsonpath:json-path-assert:0.9.1'
    compile "com.fasterxml.jackson.datatype:jackson-datatype-joda:2.4.0"

    /*
     * TESTING
     */
    testCompile 'junit:junit:4.11'
    testCompile "org.mockito:mockito-all:1.9.5"


    if( project.hasProperty('developmentMode') && project.developmentMode ) {
        logger.quiet(project.name + " using project dependencies.")
        compile project(":rhizome")
    } else {
        logger.quiet(project.name + " using jar dependencies.")
        compile "com.kryptnostic:rhizome:${rhizome_version}"
    }
}

task javadocJar(type: Jar) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task sourcesJar(type : Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task testJar(type: Jar, dependsOn: testClasses) {
    classifier = 'tests'
    from sourceSets.test.output
}

configurations {
    tests
      published.extendsFrom tests, archives 
}

artifacts {
	archives sourcesJar, javadocJar
	tests testJar
}

install { 
	configuration = configurations.published 
} 

eclipse {
    ext.downloadSources = true
    ext.downloadJavadoc = true
    ext.sourceCompatibility=JavaVersion.VERSION_1_8
    classpath {
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
}
